sa_sdk_funcs_gen, версия 2.0.2_тест
----------------------------------------------------------------------
Утилита для автоматической генерации обьявлений и определений функций
для plugin-sdk
----------------------------------------------------------------------
Входной файл: funcs.h в папке с программой
Выходной файл: funcs_conv.h в папке с программой

Формат файла funcs.h
----------------------------------------------------------------------
    vtable 0 // 0 - стартовый индекс виртуального метода в таблице
    // виртуальные методы
    end
    funcs
    // функции и методы
    end

Секции могут быть пустыми (например, если не нужно записывать
виртуальные функции).

    vtable 0
    end
    funcs
    ...
    end

Из файла читаются только первые две секции - vtable и funcs. Всё, что
находится после них - игнорируется.

Запись виртуального метода
----------------------------------------------------------------------
 Тип_возврат Класс::Название_метода(Параметры) 0x0

Тип_возврат     - Тип возвращаемого значения. Обязательно одним 
                  словом (см. Возвращаемый тип)
Класс           - Класс этого метода
Название_метода - Имя метода
Параметры       - Параметры метода. См. Запись параметров
0x0             - Неиспользуемое значение

Виртуальные методы должны быть расположены в той же
последовательности, что и в виртуальной таблице. Например,

    vtable 0
    void A::MethodA() 0x0 // виртуальный метод с индексом 0 в таблице
    void A::MethodB() 0x0 // виртуальный метод с индексом 1 в таблице
    void A::MethodC() 0x0 // виртуальный метод с индексом 2 в таблице
    end

Если класс является дочерним и некоторые виртуальные методы
определены в его родителе, то в секцию vtable...end записывать надо
только методы дочернего класса.
Допустим, класс B наследуется от A, и добавляет 2 новых виртуальных
метода

    vtable 3 // методы 0,1,2 определены в родительском классе
    void B::MethodD() 0x0 // виртуальный метод с индексом 3 в таблице
    void B::MethodE() 0x0 // виртуальный метод с индексом 4 в таблице
    end

Запись функций и методов
----------------------------------------------------------------------
Метод
 Соглашение_вызова Тип_возврат Класс::Название_метода(Параметры) Адрес
Функция
 Соглашение_вызова Тип_возврат Название_функции(Параметры) Адрес

Соглашение_вызова - thiscall (для нестатический методов) или cdecl
                    (для статических методов и функций, не являющихся
                    членами какого-либо класса)
Тип_возврат       - Тип возвращаемого значения. Обязательно одним 
                    словом (см. Возвращаемый тип)
Класс             - Класс этого метода
Название_метода   - Имя метода
Название_функции  - Имя функции
Параметры         - Параметры метода. См. Запись параметров
Адрес             - Адрес функции/метода (в 16-ричном формате, с
приставкой 0x)

    funcs
    thiscall void A::MethodF() 0x12345
    cdecl void FunctionA() 0x23456
    end

Возвращаемый тип
-----------------------------------------------------------------------
Возвращаемый тип должен обязательно присутствовать, даже если
функция ничего не возвращает (в т.ч. конструкторы и деструкторы)
В таких случаях возвращаемый тип должен быть "void".

Возвращаемый тип должен обязательно состоять из одного слова
(без пробелов)

    void *       - неправильно
    Type *       - неправильно
    unsigned int - неправильно

    void* - правильно
    Type* - правильно
    uint  - правильно

Это ограничения касается только возвращаемого типа. В параметрах
функции можно использовать "unsigned int", "unsigned short",
"void *", "Type cosnt &" и другие сочетания.

Между возвращаемым типом и именем функции должен присутствовать пробел.

Запись параметров
-----------------------------------------------------------------------
Допускается запись параметра как с именем, так и без.

    funcs
    cdecl void FunctionB(TypeA, TypeB) 0x34567
    cdecl void FunctionC(TypeA param1, TypeB param2) 0x45678
    end

Параметрам функции FunctionB автоматически будут присвоены имена arg0 и
arg1.

Если функция не принимает параметров, то оба варианта записи являются
правильными:

    funcs
    cdecl void FunctionD() 0x45678
    cdecl void FunctionE(void) 0x56789
    end

Комментарии
-----------------------------------------------------------------------
Есть возможноть добавлять комментарии к функциям.

    funcs
    // comment
    cdecl void FunctionF() 0x67890
    end
